/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"kvlt03/main.js": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./src/kvlt03/main.js","vendor.js"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/kvlt03/Canvas/_Config.js":
/*!**************************************!*\
  !*** ./src/kvlt03/Canvas/_Config.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar Config = {\n  width: 100,\n  // Canvasの幅\n  height: 100,\n  // Canvasの高さ\n  halfWidth: 50,\n  halfHeight: 50,\n  cameraZ: 500,\n  // カメラのz座標\n  dpr: 1,\n  // device pixel ratio\n  aspectRatio: 1.0 // 画面アスペクト比\n\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Config);\n\n//# sourceURL=webpack:///./src/kvlt03/Canvas/_Config.js?");

/***/ }),

/***/ "./src/kvlt03/Canvas/_index.js":
/*!*************************************!*\
  !*** ./src/kvlt03/Canvas/_index.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Canvas; });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls */ \"./node_modules/three/examples/jsm/controls/OrbitControls.js\");\n/* harmony import */ var _shader_vert_glsl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader/vert.glsl */ \"./src/kvlt03/Canvas/shader/vert.glsl\");\n/* harmony import */ var _shader_vert_glsl__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_shader_vert_glsl__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _shader_frag_glsl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shader/frag.glsl */ \"./src/kvlt03/Canvas/shader/frag.glsl\");\n/* harmony import */ var _shader_frag_glsl__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_shader_frag_glsl__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _shader_MyShaderChunks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shader/MyShaderChunks */ \"./src/kvlt03/Canvas/shader/MyShaderChunks.js\");\n/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_Config */ \"./src/kvlt03/Canvas/_Config.js\");\n/* harmony import */ var tweakpane__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tweakpane */ \"./node_modules/tweakpane/dist/tweakpane.js\");\n/* harmony import */ var tweakpane__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(tweakpane__WEBPACK_IMPORTED_MODULE_6__);\n // 必要なクラスをimport\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n // シェーダーファイルをimport\n\n\n\n/* eslint no-unused-vars: 0 */\n\n\n\n // Tweakpaneの設定\n\nvar pane = new tweakpane__WEBPACK_IMPORTED_MODULE_6___default.a();\nvar PARAMS = {\n  wd: 10.0,\n  wd2: 0.5,\n  speed: 2.0\n};\npane.addInput(PARAMS, 'wd', {\n  label: 'detail',\n  min: 0.1,\n  max: 20.0\n});\npane.addInput(PARAMS, 'wd2', {\n  label: 'detail2',\n  min: 0.1,\n  max: 10.0\n});\npane.addInput(PARAMS, 'speed', {\n  min: 0.1,\n  max: 10.0\n});\n\nvar Canvas = /*#__PURE__*/function () {\n  function Canvas() {\n    _classCallCheck(this, Canvas);\n\n    // Canvasを囲う親要素を取得\n    this.container = document.getElementById('CanvasContainer'); // Configを設定\n\n    this.setConfig(); // レンダラを作成\n\n    this.renderer = new three__WEBPACK_IMPORTED_MODULE_0__[\"WebGLRenderer\"]({\n      alpha: true,\n      antialias: false\n    });\n    this.renderer.setSize(_Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].width, _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].height);\n    this.renderer.setPixelRatio(_Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].dpr);\n    this.container.appendChild(this.renderer.domElement); // 関数をthisでバインドして持っておく\n\n    this.resizeFunction = this.resize.bind(this);\n    this.updateFunction = this.update.bind(this); // リサイズイベントを設定\n\n    window.addEventListener('resize', this.resizeFunction);\n    this.scene = new three__WEBPACK_IMPORTED_MODULE_0__[\"Scene\"](); // Cameraを作成\n\n    this.camera = new three__WEBPACK_IMPORTED_MODULE_0__[\"PerspectiveCamera\"](45, window.innerWidth / window.innerHeight, 1, 10000);\n    this.camera.position.set(0, 0, 100);\n    this.controls = new three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_1__[\"OrbitControls\"](this.camera, this.renderer.domElement); // 初期化\n\n    this.init();\n  }\n\n  _createClass(Canvas, [{\n    key: \"setConfig\",\n    value: function setConfig() {\n      // 親要素のサイズを取得\n      var domRect = this.container.getBoundingClientRect();\n      var width = domRect.width;\n      var height = domRect.height;\n      _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].dpr = Math.min(window.devicePixelRatio, 2);\n      _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].width = width;\n      _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].height = height;\n      _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].halfWidth = _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].width / 2;\n      _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].halfHeight = _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].height / 2;\n      _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].aspectRatio = _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].width / _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].height;\n    }\n  }, {\n    key: \"resizeScene\",\n    value: function resizeScene() {\n      this.renderer.setSize(_Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].width, _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].height);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.clock = new three__WEBPACK_IMPORTED_MODULE_0__[\"Clock\"]();\n      this.metaball(); // レンダリング開始\n\n      this.start();\n    }\n  }, {\n    key: \"metaball\",\n    value: function metaball() {\n      this.resolution = _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].width / _Config__WEBPACK_IMPORTED_MODULE_5__[\"default\"].height;\n      this.geometry = new three__WEBPACK_IMPORTED_MODULE_0__[\"IcosahedronGeometry\"](20, 4);\n      this.material = new three__WEBPACK_IMPORTED_MODULE_0__[\"RawShaderMaterial\"]({\n        uniforms: {\n          u_time: {\n            value: 0.0\n          },\n          // u_mouse: { value:{ x:0.0, y:0.0 }},\n          u_resolution: {\n            value: this.resolution\n          },\n          u_wd: {\n            value: PARAMS.wd\n          },\n          u_wd2: {\n            value: PARAMS.wd2\n          },\n          u_speed: {\n            value: PARAMS.speed\n          }\n        },\n        vertexShader: _shader_vert_glsl__WEBPACK_IMPORTED_MODULE_2___default.a,\n        fragmentShader: _shader_frag_glsl__WEBPACK_IMPORTED_MODULE_3___default.a,\n        wireframe: false\n      }); // Itemを作成\n\n      this.metaball = new three__WEBPACK_IMPORTED_MODULE_0__[\"Mesh\"](this.geometry, this.material); // metaballごとのSceneにmetaballを追加\n\n      this.scene.add(this.metaball);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.resize();\n      this.update();\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      this.setConfig();\n      this.resizeScene();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      requestAnimationFrame(this.updateFunction);\n      this.material.uniforms.u_time.value += this.clock.getDelta();\n      this.material.uniforms.u_wd.value = PARAMS.wd;\n      this.material.uniforms.u_wd2.value = PARAMS.wd2;\n      this.material.uniforms.u_speed.value = PARAMS.speed;\n      this.renderer.render(this.scene, this.camera);\n    }\n  }]);\n\n  return Canvas;\n}();\n\n\n\n//# sourceURL=webpack:///./src/kvlt03/Canvas/_index.js?");

/***/ }),

/***/ "./src/kvlt03/Canvas/shader/MyShaderChunks.js":
/*!****************************************************!*\
  !*** ./src/kvlt03/Canvas/shader/MyShaderChunks.js ***!
  \****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nthree__WEBPACK_IMPORTED_MODULE_0__[\"ShaderChunk\"].simple_lambert_vertex = \"\\n\\tvec3 vLightFront, vLightBack;\\n\\t#include <beginnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <lights_lambert_vertex>\\n\";\nthree__WEBPACK_IMPORTED_MODULE_0__[\"ShaderChunk\"].noise = \"\\n\\t//\\n\\t// Description : Array and textureless GLSL 2D/3D/4D simplex\\n\\t//               noise functions.\\n\\t//      Author : Ian McEwan, Ashima Arts.\\n\\t//  Maintainer : stegu\\n\\t//     Lastmod : 20110822 (ijm)\\n\\t//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n\\t//               Distributed under the MIT License. See LICENSE file.\\n\\t//               https://github.com/ashima/webgl-noise\\n\\t//               https://github.com/stegu/webgl-noise\\n\\t//\\n\\n\\tvec3 mod289(vec3 x) {\\n\\t  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n\\t}\\n\\n\\tvec4 mod289(vec4 x) {\\n\\t  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n\\t}\\n\\n\\tvec4 permute(vec4 x) {\\n\\t\\t return mod289(((x*34.0)+1.0)*x);\\n\\t}\\n\\n\\t// Permutation polynomial (ring size 289 = 17*17)\\n\\tvec3 permute(vec3 x) {\\n\\t  return mod289(((x*34.0)+1.0)*x);\\n\\t}\\n\\n\\tfloat permute(float x){\\n\\t\\treturn x - floor(x * (1.0 / 289.0)) * 289.0;;\\n\\t}\\n\\n\\tvec4 taylorInvSqrt(vec4 r){\\n\\t  return 1.79284291400159 - 0.85373472095314 * r;\\n\\t}\\n\\n\\tvec2 fade(vec2 t) {\\n\\t  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n\\t}\\n\\n\\tvec3 fade(vec3 t) {\\n\\t  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n\\t}\\n\\n\\t// Hashed 2-D gradients with an extra rotation.\\n\\t// (The constant 0.0243902439 is 1/41)\\n\\tvec2 rgrad2(vec2 p, float rot) {\\n\\t#if 0\\n\\t// Map from a line to a diamond such that a shift maps to a rotation.\\n\\t  float u = permute(permute(p.x) + p.y) * 0.0243902439 + rot; // Rotate by shift\\n\\t  u = 4.0 * fract(u) - 2.0;\\n\\t  // (This vector could be normalized, exactly or approximately.)\\n\\t  return vec2(abs(u)-1.0, abs(abs(u+1.0)-2.0)-1.0);\\n\\t#else\\n\\t// For more isotropic gradients, sin/cos can be used instead.\\n\\t  float u = permute(permute(p.x) + p.y) * 0.0243902439 + rot; // Rotate by shift\\n\\t  u = fract(u) * 6.28318530718; // 2*pi\\n\\t  return vec2(cos(u), sin(u));\\n\\t#endif\\n\\t}\\n\\n\\tfloat snoise(vec3 v){\\n\\t  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n\\t  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n\\t// First corner\\n\\t  vec3 i  = floor(v + dot(v, C.yyy) );\\n\\t  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n\\t// Other corners\\n\\t  vec3 g = step(x0.yzx, x0.xyz);\\n\\t  vec3 l = 1.0 - g;\\n\\t  vec3 i1 = min( g.xyz, l.zxy );\\n\\t  vec3 i2 = max( g.xyz, l.zxy );\\n\\n\\t  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n\\t  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n\\t  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n\\t  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n\\t  vec3 x1 = x0 - i1 + C.xxx;\\n\\t  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n\\t  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n\\t// Permutations\\n\\t  i = mod289(i);\\n\\t  vec4 p = permute( permute( permute(\\n\\t\\t\\t\\t i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n\\t\\t\\t   + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n\\t\\t\\t   + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n\\t// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n\\t// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n\\t  float n_ = 0.142857142857; // 1.0/7.0\\n\\t  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n\\t  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n\\t  vec4 x_ = floor(j * ns.z);\\n\\t  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n\\t  vec4 x = x_ *ns.x + ns.yyyy;\\n\\t  vec4 y = y_ *ns.x + ns.yyyy;\\n\\t  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n\\t  vec4 b0 = vec4( x.xy, y.xy );\\n\\t  vec4 b1 = vec4( x.zw, y.zw );\\n\\n\\t  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n\\t  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n\\t  vec4 s0 = floor(b0)*2.0 + 1.0;\\n\\t  vec4 s1 = floor(b1)*2.0 + 1.0;\\n\\t  vec4 sh = -step(h, vec4(0.0));\\n\\n\\t  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n\\t  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n\\t  vec3 p0 = vec3(a0.xy,h.x);\\n\\t  vec3 p1 = vec3(a0.zw,h.y);\\n\\t  vec3 p2 = vec3(a1.xy,h.z);\\n\\t  vec3 p3 = vec3(a1.zw,h.w);\\n\\n\\t//Normalise gradients\\n\\t  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n\\t  p0 *= norm.x;\\n\\t  p1 *= norm.y;\\n\\t  p2 *= norm.z;\\n\\t  p3 *= norm.w;\\n\\n\\t// Mix final noise value\\n\\t  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n\\t  m = m * m;\\n\\t  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdot(p2,x2), dot(p3,x3) ) );\\n\\t  }\\n\\n\\t// Classic Perlin noise\\n\\tfloat cnoise(vec2 P){\\n\\t  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\\n\\t  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\\n\\t  Pi = mod289(Pi); // To avoid truncation effects in permutation\\n\\t  vec4 ix = Pi.xzxz;\\n\\t  vec4 iy = Pi.yyww;\\n\\t  vec4 fx = Pf.xzxz;\\n\\t  vec4 fy = Pf.yyww;\\n\\n\\t  vec4 i = permute(permute(ix) + iy);\\n\\n\\t  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\\n\\t  vec4 gy = abs(gx) - 0.5 ;\\n\\t  vec4 tx = floor(gx + 0.5);\\n\\t  gx = gx - tx;\\n\\n\\t  vec2 g00 = vec2(gx.x,gy.x);\\n\\t  vec2 g10 = vec2(gx.y,gy.y);\\n\\t  vec2 g01 = vec2(gx.z,gy.z);\\n\\t  vec2 g11 = vec2(gx.w,gy.w);\\n\\n\\t  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\\n\\t  g00 *= norm.x;\\n\\t  g01 *= norm.y;\\n\\t  g10 *= norm.z;\\n\\t  g11 *= norm.w;\\n\\n\\t  float n00 = dot(g00, vec2(fx.x, fy.x));\\n\\t  float n10 = dot(g10, vec2(fx.y, fy.y));\\n\\t  float n01 = dot(g01, vec2(fx.z, fy.z));\\n\\t  float n11 = dot(g11, vec2(fx.w, fy.w));\\n\\n\\t  vec2 fade_xy = fade(Pf.xy);\\n\\t  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\\n\\t  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\\n\\t  return 2.3 * n_xy;\\n\\t}\\n\\n\\t// Classic Perlin noise, periodic variant\\n\\tfloat pnoise(vec2 P, vec2 rep){\\n\\t  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\\n\\t  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\\n\\t  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period\\n\\t  Pi = mod289(Pi);        // To avoid truncation effects in permutation\\n\\t  vec4 ix = Pi.xzxz;\\n\\t  vec4 iy = Pi.yyww;\\n\\t  vec4 fx = Pf.xzxz;\\n\\t  vec4 fy = Pf.yyww;\\n\\n\\t  vec4 i = permute(permute(ix) + iy);\\n\\n\\t  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\\n\\t  vec4 gy = abs(gx) - 0.5 ;\\n\\t  vec4 tx = floor(gx + 0.5);\\n\\t  gx = gx - tx;\\n\\n\\t  vec2 g00 = vec2(gx.x,gy.x);\\n\\t  vec2 g10 = vec2(gx.y,gy.y);\\n\\t  vec2 g01 = vec2(gx.z,gy.z);\\n\\t  vec2 g11 = vec2(gx.w,gy.w);\\n\\n\\t  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\\n\\t  g00 *= norm.x;\\n\\t  g01 *= norm.y;\\n\\t  g10 *= norm.z;\\n\\t  g11 *= norm.w;\\n\\n\\t  float n00 = dot(g00, vec2(fx.x, fy.x));\\n\\t  float n10 = dot(g10, vec2(fx.y, fy.y));\\n\\t  float n01 = dot(g01, vec2(fx.z, fy.z));\\n\\t  float n11 = dot(g11, vec2(fx.w, fy.w));\\n\\n\\t  vec2 fade_xy = fade(Pf.xy);\\n\\t  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\\n\\t  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\\n\\t  return 2.3 * n_xy;\\n\\t}\\n\\t// Classic Perlin noise\\n\\tfloat cnoise(vec3 P)\\n\\t{\\n\\t  vec3 Pi0 = floor(P); // Integer part for indexing\\n\\t  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n\\t  Pi0 = mod289(Pi0);\\n\\t  Pi1 = mod289(Pi1);\\n\\t  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n\\t  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n\\t  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n\\t  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n\\t  vec4 iz0 = Pi0.zzzz;\\n\\t  vec4 iz1 = Pi1.zzzz;\\n\\n\\t  vec4 ixy = permute(permute(ix) + iy);\\n\\t  vec4 ixy0 = permute(ixy + iz0);\\n\\t  vec4 ixy1 = permute(ixy + iz1);\\n\\n\\t  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n\\t  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n\\t  gx0 = fract(gx0);\\n\\t  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n\\t  vec4 sz0 = step(gz0, vec4(0.0));\\n\\t  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n\\t  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n\\t  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n\\t  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n\\t  gx1 = fract(gx1);\\n\\t  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n\\t  vec4 sz1 = step(gz1, vec4(0.0));\\n\\t  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n\\t  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n\\t  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n\\t  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n\\t  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n\\t  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n\\t  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n\\t  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n\\t  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n\\t  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n\\t  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n\\t  g000 *= norm0.x;\\n\\t  g010 *= norm0.y;\\n\\t  g100 *= norm0.z;\\n\\t  g110 *= norm0.w;\\n\\t  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n\\t  g001 *= norm1.x;\\n\\t  g011 *= norm1.y;\\n\\t  g101 *= norm1.z;\\n\\t  g111 *= norm1.w;\\n\\n\\t  float n000 = dot(g000, Pf0);\\n\\t  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n\\t  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n\\t  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n\\t  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n\\t  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n\\t  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n\\t  float n111 = dot(g111, Pf1);\\n\\n\\t  vec3 fade_xyz = fade(Pf0);\\n\\t  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n\\t  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n\\t  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\\n\\t  return 2.2 * n_xyz;\\n\\t}\\n\\n\\t// Classic Perlin noise, periodic variant\\n\\tfloat pnoise(vec3 P, vec3 rep)\\n\\t{\\n\\t  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\\n\\t  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\\n\\t  Pi0 = mod289(Pi0);\\n\\t  Pi1 = mod289(Pi1);\\n\\t  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n\\t  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n\\t  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n\\t  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n\\t  vec4 iz0 = Pi0.zzzz;\\n\\t  vec4 iz1 = Pi1.zzzz;\\n\\n\\t  vec4 ixy = permute(permute(ix) + iy);\\n\\t  vec4 ixy0 = permute(ixy + iz0);\\n\\t  vec4 ixy1 = permute(ixy + iz1);\\n\\n\\t  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n\\t  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n\\t  gx0 = fract(gx0);\\n\\t  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n\\t  vec4 sz0 = step(gz0, vec4(0.0));\\n\\t  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n\\t  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n\\t  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n\\t  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n\\t  gx1 = fract(gx1);\\n\\t  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n\\t  vec4 sz1 = step(gz1, vec4(0.0));\\n\\t  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n\\t  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n\\t  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n\\t  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n\\t  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n\\t  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n\\t  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n\\t  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n\\t  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n\\t  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n\\t  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n\\t  g000 *= norm0.x;\\n\\t  g010 *= norm0.y;\\n\\t  g100 *= norm0.z;\\n\\t  g110 *= norm0.w;\\n\\t  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n\\t  g001 *= norm1.x;\\n\\t  g011 *= norm1.y;\\n\\t  g101 *= norm1.z;\\n\\t  g111 *= norm1.w;\\n\\n\\t  float n000 = dot(g000, Pf0);\\n\\t  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n\\t  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n\\t  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n\\t  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n\\t  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n\\t  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n\\t  float n111 = dot(g111, Pf1);\\n\\n\\t  vec3 fade_xyz = fade(Pf0);\\n\\t  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n\\t  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n\\t  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\\n\\t  return 2.2 * n_xyz;\\n\\t}\\n\\n\\tfloat turbulence( vec3 p ) {\\n\\t  float w = 100.0;\\n\\t  float t = -.5;\\n\\n\\t  for (float f = 1.0 ; f <= 10.0 ; f++ ){\\n\\t\\tfloat power = pow( 2.0, f );\\n\\t\\tt += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );\\n\\t  }\\n\\n\\t  return t;\\n\\t}\\n\\n\\tfloat turbulence3( vec3 p ) {\\n\\t  float w = 100.0;\\n\\t  float t = -.5;\\n\\n\\t  for (float f = 1.0 ; f <= 3.0 ; f++ ){\\n\\t\\tfloat power = pow( 2.0, f );\\n\\t\\tt += abs( pnoise( vec3( power * p ), vec3( 3.0, 3.0, 3.0 ) ) / power );\\n\\t  }\\n\\n\\t  return t;\\n\\t}\\n\\n\\tfloat turbulence6( vec3 p ) {\\n\\t  float w = 100.0;\\n\\t  float t = -.5;\\n\\n\\t  for (float f = 1.0 ; f <= 6.0 ; f++ ){\\n\\t\\tfloat power = pow( 2.0, f );\\n\\t\\tt += abs( pnoise( vec3( power * p ), vec3( 6.0, 6.0, 6.0 ) ) / power );\\n\\t  }\\n\\n\\t  return t;\\n\\t}\\n\\n\\t//\\n\\t// 2-D tiling simplex noise with rotating gradients and analytical derivative.\\n\\t// The first component of the 3-element return vector is the noise value,\\n\\t// and the second and third components are the x and y partial derivatives.\\n\\t//\\n\\tvec3 psrdnoise(vec2 pos, vec2 per, float rot) {\\n\\t  // Hack: offset y slightly to hide some rare artifacts\\n\\t  pos.y += 0.01;\\n\\t  // Skew to hexagonal grid\\n\\t  vec2 uv = vec2(pos.x + pos.y*0.5, pos.y);\\n\\n\\t  vec2 i0 = floor(uv);\\n\\t  vec2 f0 = fract(uv);\\n\\t  // Traversal order\\n\\t  vec2 i1 = (f0.x > f0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n\\n\\t  // Unskewed grid points in (x,y) space\\n\\t  vec2 p0 = vec2(i0.x - i0.y * 0.5, i0.y);\\n\\t  vec2 p1 = vec2(p0.x + i1.x - i1.y * 0.5, p0.y + i1.y);\\n\\t  vec2 p2 = vec2(p0.x + 0.5, p0.y + 1.0);\\n\\n\\t  // Integer grid point indices in (u,v) space\\n\\t  i1 = i0 + i1;\\n\\t  vec2 i2 = i0 + vec2(1.0, 1.0);\\n\\n\\t  // Vectors in unskewed (x,y) coordinates from\\n\\t  // each of the simplex corners to the evaluation point\\n\\t  vec2 d0 = pos - p0;\\n\\t  vec2 d1 = pos - p1;\\n\\t  vec2 d2 = pos - p2;\\n\\n\\t  // Wrap i0, i1 and i2 to the desired period before gradient hashing:\\n\\t  // wrap points in (x,y), map to (u,v)\\n\\t  vec3 xw = mod(vec3(p0.x, p1.x, p2.x), per.x);\\n\\t  vec3 yw = mod(vec3(p0.y, p1.y, p2.y), per.y);\\n\\t  vec3 iuw = xw + 0.5 * yw;\\n\\t  vec3 ivw = yw;\\n\\n\\t  // Create gradients from indices\\n\\t  vec2 g0 = rgrad2(vec2(iuw.x, ivw.x), rot);\\n\\t  vec2 g1 = rgrad2(vec2(iuw.y, ivw.y), rot);\\n\\t  vec2 g2 = rgrad2(vec2(iuw.z, ivw.z), rot);\\n\\n\\t  // Gradients dot vectors to corresponding corners\\n\\t  // (The derivatives of this are simply the gradients)\\n\\t  vec3 w = vec3(dot(g0, d0), dot(g1, d1), dot(g2, d2));\\n\\n\\t  // Radial weights from corners\\n\\t  // 0.8 is the square of 2/sqrt(5), the distance from\\n\\t  // a grid point to the nearest simplex boundary\\n\\t  vec3 t = 0.8 - vec3(dot(d0, d0), dot(d1, d1), dot(d2, d2));\\n\\n\\t  // Partial derivatives for analytical gradient computation\\n\\t  vec3 dtdx = -2.0 * vec3(d0.x, d1.x, d2.x);\\n\\t  vec3 dtdy = -2.0 * vec3(d0.y, d1.y, d2.y);\\n\\n\\t  // Set influence of each surflet to zero outside radius sqrt(0.8)\\n\\t  if (t.x < 0.0) {\\n\\t\\tdtdx.x = 0.0;\\n\\t\\tdtdy.x = 0.0;\\n\\t\\tt.x = 0.0;\\n\\t  }\\n\\t  if (t.y < 0.0) {\\n\\t\\tdtdx.y = 0.0;\\n\\t\\tdtdy.y = 0.0;\\n\\t\\tt.y = 0.0;\\n\\t  }\\n\\t  if (t.z < 0.0) {\\n\\t\\tdtdx.z = 0.0;\\n\\t\\tdtdy.z = 0.0;\\n\\t\\tt.z = 0.0;\\n\\t  }\\n\\n\\t  // Fourth power of t (and third power for derivative)\\n\\t  vec3 t2 = t * t;\\n\\t  vec3 t4 = t2 * t2;\\n\\t  vec3 t3 = t2 * t;\\n\\n\\t  // Final noise value is:\\n\\t  // sum of ((radial weights) times (gradient dot vector from corner))\\n\\t  float n = dot(t4, w);\\n\\n\\t  // Final analytical derivative (gradient of a sum of scalar products)\\n\\t  vec2 dt0 = vec2(dtdx.x, dtdy.x) * 4.0 * t3.x;\\n\\t  vec2 dn0 = t4.x * g0 + dt0 * w.x;\\n\\t  vec2 dt1 = vec2(dtdx.y, dtdy.y) * 4.0 * t3.y;\\n\\t  vec2 dn1 = t4.y * g1 + dt1 * w.y;\\n\\t  vec2 dt2 = vec2(dtdx.z, dtdy.z) * 4.0 * t3.z;\\n\\t  vec2 dn2 = t4.z * g2 + dt2 * w.z;\\n\\n\\t  return 11.0*vec3(n, dn0 + dn1 + dn2);\\n\\t}\\n\\n\\t//\\n\\t// 2-D tiling simplex noise with fixed gradients\\n\\t// and analytical derivative.\\n\\t// This function is implemented as a wrapper to \\\"psrdnoise\\\",\\n\\t// at the minimal cost of three extra additions.\\n\\t//\\n\\tvec3 psdnoise(vec2 pos, vec2 per) {\\n\\t  return psrdnoise(pos, per, 0.0);\\n\\t}\\n\\n\\t//\\n\\t// 2-D tiling simplex noise with rotating gradients,\\n\\t// but without the analytical derivative.\\n\\t//\\n\\tfloat psrnoise(vec2 pos, vec2 per, float rot) {\\n\\t  // Offset y slightly to hide some rare artifacts\\n\\t  pos.y += 0.001;\\n\\t  // Skew to hexagonal grid\\n\\t  vec2 uv = vec2(pos.x + pos.y*0.5, pos.y);\\n\\n\\t  vec2 i0 = floor(uv);\\n\\t  vec2 f0 = fract(uv);\\n\\t  // Traversal order\\n\\t  vec2 i1 = (f0.x > f0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n\\n\\t  // Unskewed grid points in (x,y) space\\n\\t  vec2 p0 = vec2(i0.x - i0.y * 0.5, i0.y);\\n\\t  vec2 p1 = vec2(p0.x + i1.x - i1.y * 0.5, p0.y + i1.y);\\n\\t  vec2 p2 = vec2(p0.x + 0.5, p0.y + 1.0);\\n\\n\\t  // Integer grid point indices in (u,v) space\\n\\t  i1 = i0 + i1;\\n\\t  vec2 i2 = i0 + vec2(1.0, 1.0);\\n\\n\\t  // Vectors in unskewed (x,y) coordinates from\\n\\t  // each of the simplex corners to the evaluation point\\n\\t  vec2 d0 = pos - p0;\\n\\t  vec2 d1 = pos - p1;\\n\\t  vec2 d2 = pos - p2;\\n\\n\\t  // Wrap i0, i1 and i2 to the desired period before gradient hashing:\\n\\t  // wrap points in (x,y), map to (u,v)\\n\\t  vec3 xw = mod(vec3(p0.x, p1.x, p2.x), per.x);\\n\\t  vec3 yw = mod(vec3(p0.y, p1.y, p2.y), per.y);\\n\\t  vec3 iuw = xw + 0.5 * yw;\\n\\t  vec3 ivw = yw;\\n\\n\\t  // Create gradients from indices\\n\\t  vec2 g0 = rgrad2(vec2(iuw.x, ivw.x), rot);\\n\\t  vec2 g1 = rgrad2(vec2(iuw.y, ivw.y), rot);\\n\\t  vec2 g2 = rgrad2(vec2(iuw.z, ivw.z), rot);\\n\\n\\t  // Gradients dot vectors to corresponding corners\\n\\t  // (The derivatives of this are simply the gradients)\\n\\t  vec3 w = vec3(dot(g0, d0), dot(g1, d1), dot(g2, d2));\\n\\n\\t  // Radial weights from corners\\n\\t  // 0.8 is the square of 2/sqrt(5), the distance from\\n\\t  // a grid point to the nearest simplex boundary\\n\\t  vec3 t = 0.8 - vec3(dot(d0, d0), dot(d1, d1), dot(d2, d2));\\n\\n\\t  // Set influence of each surflet to zero outside radius sqrt(0.8)\\n\\t  t = max(t, 0.0);\\n\\n\\t  // Fourth power of t\\n\\t  vec3 t2 = t * t;\\n\\t  vec3 t4 = t2 * t2;\\n\\n\\t  // Final noise value is:\\n\\t  // sum of ((radial weights) times (gradient dot vector from corner))\\n\\t  float n = dot(t4, w);\\n\\n\\t  // Rescale to cover the range [-1,1] reasonably well\\n\\t  return 11.0*n;\\n\\t}\\n\\n\\t//\\n\\t// 2-D tiling simplex noise with fixed gradients,\\n\\t// without the analytical derivative.\\n\\t// This function is implemented as a wrapper to \\\"psrnoise\\\",\\n\\t// at the minimal cost of three extra additions.\\n\\t//\\n\\tfloat psnoise(vec2 pos, vec2 per) {\\n\\t  return psrnoise(pos, per, 0.0);\\n\\t}\\n\\n\\t//\\n\\t// 2-D non-tiling simplex noise with rotating gradients and analytical derivative.\\n\\t// The first component of the 3-element return vector is the noise value,\\n\\t// and the second and third components are the x and y partial derivatives.\\n\\t//\\n\\tvec3 srdnoise(vec2 pos, float rot) {\\n\\t  // Offset y slightly to hide some rare artifacts\\n\\t  pos.y += 0.001;\\n\\t  // Skew to hexagonal grid\\n\\t  vec2 uv = vec2(pos.x + pos.y*0.5, pos.y);\\n\\n\\t  vec2 i0 = floor(uv);\\n\\t  vec2 f0 = fract(uv);\\n\\t  // Traversal order\\n\\t  vec2 i1 = (f0.x > f0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n\\n\\t  // Unskewed grid points in (x,y) space\\n\\t  vec2 p0 = vec2(i0.x - i0.y * 0.5, i0.y);\\n\\t  vec2 p1 = vec2(p0.x + i1.x - i1.y * 0.5, p0.y + i1.y);\\n\\t  vec2 p2 = vec2(p0.x + 0.5, p0.y + 1.0);\\n\\n\\t  // Integer grid point indices in (u,v) space\\n\\t  i1 = i0 + i1;\\n\\t  vec2 i2 = i0 + vec2(1.0, 1.0);\\n\\n\\t  // Vectors in unskewed (x,y) coordinates from\\n\\t  // each of the simplex corners to the evaluation point\\n\\t  vec2 d0 = pos - p0;\\n\\t  vec2 d1 = pos - p1;\\n\\t  vec2 d2 = pos - p2;\\n\\n\\t  vec3 x = vec3(p0.x, p1.x, p2.x);\\n\\t  vec3 y = vec3(p0.y, p1.y, p2.y);\\n\\t  vec3 iuw = x + 0.5 * y;\\n\\t  vec3 ivw = y;\\n\\n\\t  // Avoid precision issues in permutation\\n\\t  iuw = mod289(iuw);\\n\\t  ivw = mod289(ivw);\\n\\n\\t  // Create gradients from indices\\n\\t  vec2 g0 = rgrad2(vec2(iuw.x, ivw.x), rot);\\n\\t  vec2 g1 = rgrad2(vec2(iuw.y, ivw.y), rot);\\n\\t  vec2 g2 = rgrad2(vec2(iuw.z, ivw.z), rot);\\n\\n\\t  // Gradients dot vectors to corresponding corners\\n\\t  // (The derivatives of this are simply the gradients)\\n\\t  vec3 w = vec3(dot(g0, d0), dot(g1, d1), dot(g2, d2));\\n\\n\\t  // Radial weights from corners\\n\\t  // 0.8 is the square of 2/sqrt(5), the distance from\\n\\t  // a grid point to the nearest simplex boundary\\n\\t  vec3 t = 0.8 - vec3(dot(d0, d0), dot(d1, d1), dot(d2, d2));\\n\\n\\t  // Partial derivatives for analytical gradient computation\\n\\t  vec3 dtdx = -2.0 * vec3(d0.x, d1.x, d2.x);\\n\\t  vec3 dtdy = -2.0 * vec3(d0.y, d1.y, d2.y);\\n\\n\\t  // Set influence of each surflet to zero outside radius sqrt(0.8)\\n\\t  if (t.x < 0.0) {\\n\\t\\tdtdx.x = 0.0;\\n\\t\\tdtdy.x = 0.0;\\n\\t\\tt.x = 0.0;\\n\\t  }\\n\\t  if (t.y < 0.0) {\\n\\t\\tdtdx.y = 0.0;\\n\\t\\tdtdy.y = 0.0;\\n\\t\\tt.y = 0.0;\\n\\t  }\\n\\t  if (t.z < 0.0) {\\n\\t\\tdtdx.z = 0.0;\\n\\t\\tdtdy.z = 0.0;\\n\\t\\tt.z = 0.0;\\n\\t  }\\n\\n\\t  // Fourth power of t (and third power for derivative)\\n\\t  vec3 t2 = t * t;\\n\\t  vec3 t4 = t2 * t2;\\n\\t  vec3 t3 = t2 * t;\\n\\n\\t  // Final noise value is:\\n\\t  // sum of ((radial weights) times (gradient dot vector from corner))\\n\\t  float n = dot(t4, w);\\n\\n\\t  // Final analytical derivative (gradient of a sum of scalar products)\\n\\t  vec2 dt0 = vec2(dtdx.x, dtdy.x) * 4.0 * t3.x;\\n\\t  vec2 dn0 = t4.x * g0 + dt0 * w.x;\\n\\t  vec2 dt1 = vec2(dtdx.y, dtdy.y) * 4.0 * t3.y;\\n\\t  vec2 dn1 = t4.y * g1 + dt1 * w.y;\\n\\t  vec2 dt2 = vec2(dtdx.z, dtdy.z) * 4.0 * t3.z;\\n\\t  vec2 dn2 = t4.z * g2 + dt2 * w.z;\\n\\n\\t  return 11.0*vec3(n, dn0 + dn1 + dn2);\\n\\t}\\n\\n\\t//\\n\\t// 2-D non-tiling simplex noise with fixed gradients and analytical derivative.\\n\\t// This function is implemented as a wrapper to \\\"srdnoise\\\",\\n\\t// at the minimal cost of three extra additions.\\n\\t//\\n\\tvec3 sdnoise(vec2 pos) {\\n\\t  return srdnoise(pos, 0.0);\\n\\t}\\n\\n\\t//\\n\\t// 2-D non-tiling simplex noise with rotating gradients,\\n\\t// without the analytical derivative.\\n\\t//\\n\\tfloat srnoise(vec2 pos, float rot) {\\n\\t  // Offset y slightly to hide some rare artifacts\\n\\t  pos.y += 0.001;\\n\\t  // Skew to hexagonal grid\\n\\t  vec2 uv = vec2(pos.x + pos.y*0.5, pos.y);\\n\\n\\t  vec2 i0 = floor(uv);\\n\\t  vec2 f0 = fract(uv);\\n\\t  // Traversal order\\n\\t  vec2 i1 = (f0.x > f0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n\\n\\t  // Unskewed grid points in (x,y) space\\n\\t  vec2 p0 = vec2(i0.x - i0.y * 0.5, i0.y);\\n\\t  vec2 p1 = vec2(p0.x + i1.x - i1.y * 0.5, p0.y + i1.y);\\n\\t  vec2 p2 = vec2(p0.x + 0.5, p0.y + 1.0);\\n\\n\\t  // Integer grid point indices in (u,v) space\\n\\t  i1 = i0 + i1;\\n\\t  vec2 i2 = i0 + vec2(1.0, 1.0);\\n\\n\\t  // Vectors in unskewed (x,y) coordinates from\\n\\t  // each of the simplex corners to the evaluation point\\n\\t  vec2 d0 = pos - p0;\\n\\t  vec2 d1 = pos - p1;\\n\\t  vec2 d2 = pos - p2;\\n\\n\\t  // Wrap i0, i1 and i2 to the desired period before gradient hashing:\\n\\t  // wrap points in (x,y), map to (u,v)\\n\\t  vec3 x = vec3(p0.x, p1.x, p2.x);\\n\\t  vec3 y = vec3(p0.y, p1.y, p2.y);\\n\\t  vec3 iuw = x + 0.5 * y;\\n\\t  vec3 ivw = y;\\n\\n\\t  // Avoid precision issues in permutation\\n\\t  iuw = mod289(iuw);\\n\\t  ivw = mod289(ivw);\\n\\n\\t  // Create gradients from indices\\n\\t  vec2 g0 = rgrad2(vec2(iuw.x, ivw.x), rot);\\n\\t  vec2 g1 = rgrad2(vec2(iuw.y, ivw.y), rot);\\n\\t  vec2 g2 = rgrad2(vec2(iuw.z, ivw.z), rot);\\n\\n\\t  // Gradients dot vectors to corresponding corners\\n\\t  // (The derivatives of this are simply the gradients)\\n\\t  vec3 w = vec3(dot(g0, d0), dot(g1, d1), dot(g2, d2));\\n\\n\\t  // Radial weights from corners\\n\\t  // 0.8 is the square of 2/sqrt(5), the distance from\\n\\t  // a grid point to the nearest simplex boundary\\n\\t  vec3 t = 0.8 - vec3(dot(d0, d0), dot(d1, d1), dot(d2, d2));\\n\\n\\t  // Set influence of each surflet to zero outside radius sqrt(0.8)\\n\\t  t = max(t, 0.0);\\n\\n\\t  // Fourth power of t\\n\\t  vec3 t2 = t * t;\\n\\t  vec3 t4 = t2 * t2;\\n\\n\\t  // Final noise value is:\\n\\t  // sum of ((radial weights) times (gradient dot vector from corner))\\n\\t  float n = dot(t4, w);\\n\\n\\t  // Rescale to cover the range [-1,1] reasonably well\\n\\t  return 11.0*n;\\n\\t}\\n\\n\\t//\\n\\t// 2-D non-tiling simplex noise with fixed gradients,\\n\\t// without the analytical derivative.\\n\\t// This function is implemented as a wrapper to \\\"srnoise\\\",\\n\\t// at the minimal cost of three extra additions.\\n\\t// Note: if this kind of noise is all you want, there are faster\\n\\t// GLSL implementations of non-tiling simplex noise out there.\\n\\t// This one is included mainly for completeness and compatibility\\n\\t// with the other functions in the file.\\n\\t//\\n\\tfloat snoise(vec2 pos) {\\n\\t  return srnoise(pos, 0.0);\\n\\t}\\n\\n\\tfloat hash(float x, float y) {\\n\\t\\treturn fract(abs(sin(sin(123.321 + x) * (y + 321.123)) * 456.654));\\n\\t}\\n\\n\\tfloat lerp(float a, float b, float t) {\\n\\t\\treturn a * (1.0 - t) + b * t;\\n\\t}\\n\\n\\tfloat perlin(float x, float y){\\n\\t\\tfloat col = 0.0;\\n\\t\\tfor (int i = 0; i < 8; i++)\\n\\t\\t{\\n\\t\\t\\tfloat fx = floor(x);\\n\\t\\t\\tfloat fy = floor(y);\\n\\t\\t\\tfloat cx = ceil(x);\\n\\t\\t\\tfloat cy = ceil(y);\\n\\t\\t\\tfloat a = hash(fx, fy);\\n\\t\\t\\tfloat b = hash(fx, cy);\\n\\t\\t\\tfloat c = hash(cx, fy);\\n\\t\\t\\tfloat d = hash(cx, cy);\\n\\t\\t\\tcol += lerp(lerp(a, b, fract(y)), lerp(c, d, fract(y)), fract(x));\\n\\t\\t\\tcol /= 2.0;\\n\\t\\t\\tx /= 2.0;\\n\\t\\t\\ty /= 2.0;\\n\\t\\t}\\n\\t\\treturn col;\\n\\t}\\n\\n\\tfloat dperlin(float x, float y){\\n\\t\\tfloat d = perlin(x, y) * 800.0;\\n\\t\\treturn perlin(x + d, y + d);\\n\\t}\\n\\n\\tfloat ddperlin(float x, float y){\\n\\t\\tfloat d = perlin(x, y) * 800.0;\\n\\t\\treturn dperlin(x + d, y + d);\\n\\t}\\n\";\n\n//# sourceURL=webpack:///./src/kvlt03/Canvas/shader/MyShaderChunks.js?");

/***/ }),

/***/ "./src/kvlt03/Canvas/shader/frag.glsl":
/*!********************************************!*\
  !*** ./src/kvlt03/Canvas/shader/frag.glsl ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"precision highp float;\\n\\n#define PI 3.141592653589\\n#define PI2 6.28318530718\\n\\nuniform vec2 u_mouse;\\nuniform vec2 u_resolution;\\nuniform float u_time;\\nuniform sampler2D u_tex;\\n\\nvarying vec2 vUv;\\nvarying float vNoise;\\n\\n//\\t<https://www.shadertoy.com/view/4dS3Wd>\\n//\\tBy Morgan McGuire @morgan3d, http://graphicscodex.com\\n\\n//https://www.clicktorelease.com/blog/vertex-displacement-noise-3d-webgl-glsl-three-js/\\n\\nvoid main (void)\\n{\\n   vec3 color = vec3( vUv * ( 1. - 2. * vNoise ), 0.0 );\\n  //  vec3 color = vec3( vUv, 0.0 );\\n  gl_FragColor = vec4(color, 1.0);\\n}\\n\"\n\n//# sourceURL=webpack:///./src/kvlt03/Canvas/shader/frag.glsl?");

/***/ }),

/***/ "./src/kvlt03/Canvas/shader/vert.glsl":
/*!********************************************!*\
  !*** ./src/kvlt03/Canvas/shader/vert.glsl ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"precision highp float;\\n\\n#include <noise>\\n\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform float u_time;\\nuniform float u_wd;\\nuniform float u_wd2;\\nuniform float u_speed;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nvarying vec2 vUv;\\nvarying float vNoise;\\n\\nvoid main() {\\n  float displacement;\\n  float time = u_time * u_speed;\\n  float b;\\n\\n  vUv = uv;\\n\\n// add time to the noise parameters so it's animated\\n\\nvNoise = u_wd *  -.10 * turbulence( u_wd2 * normal + time );\\nb = 5.0 * pnoise( 0.05 * position + vec3( time ), vec3( 100.0 ) );\\ndisplacement = - 10. * vNoise + b;\\n\\n\\n  // move the position along the normal and transform it\\n  vec3 newPosition = position + normal * displacement;\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\\n}\\n\"\n\n//# sourceURL=webpack:///./src/kvlt03/Canvas/shader/vert.glsl?");

/***/ }),

/***/ "./src/kvlt03/main.js":
/*!****************************!*\
  !*** ./src/kvlt03/main.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Canvas_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Canvas/_index */ \"./src/kvlt03/Canvas/_index.js\");\n\n\n(function () {\n  new _Canvas_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n})();\n\n//# sourceURL=webpack:///./src/kvlt03/main.js?");

/***/ })

/******/ });